# streamlit_app.py
import streamlit as st
import tempfile
from dance_analyzer.dance_analyzer import process_video  # Import your functions

st.title("Dance Performance Analyzer")

# Allow users to upload a video
uploaded_file = st.file_uploader("Upload a video", type=["mp4", "mov", "avi"])

if uploaded_file is not None:
    st.video(uploaded_file)  # Display uploaded video

    # Save uploaded video to a temporary file
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as tmp_file:
        tmp_file.write(uploaded_file.read())
        video_path = tmp_file.name
def calculate_movement_speed(prev_frame, curr_frame):
    speed = 0
    count = 0
    for p, c in zip(prev_frame["landmarks"], curr_frame["landmarks"]):
        dx = c["x"] - p["x"]
        dy = c["y"] - p["y"]
        dz = c["z"] - p["z"]
        speed += (dx**2 + dy**2 + dz**2)**0.5
        count += 1
    return speed / count if count else 0

def calculate_body_stability(frame):
    # Dummy stability calculation â€“ this could be based on visibility, posture, or jitter
    visibility_scores = [lm["visibility"] for lm in frame["landmarks"]]
    return sum(visibility_scores) / len(visibility_scores)

    # Create a path for the feedback video
    feedback_video_path = video_path.replace(".mp4", "_feedback.mp4")

    # Call your dance analysis function
    feedback, movement_patterns = process_video(video_path, feedback_video_path, dance_style="hiphop")

    st.subheader("Feedback:")
    st.write(feedback)  # Display feedback generated by the model

    st.subheader("Movement Patterns:")
    st.json(movement_patterns)  # Display the movement patterns data

    st.subheader("Feedback Video:")
    st.video(feedback_video_path)  # Display the annotated feedback video
